#!/usr/bin/env node

//const http = require("http");
const https = require('https');
const fs = require('fs');

let app = require("../app");

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
    res.status(404);
    res.json({ status: "not-found" });
});

app.use((err, req, res, next) => {
    // always log the error
    console.error("ERROR", req.method, req.path, err);

    // only render if the error ocurred before sending the response
    if (!res.headersSent) {
        res.status(500);
        res.render({ status: "server error" });
    }
});

// let server = http.createServer(app);
let server = https.createServer({
    key: fs.readFileSync('./bin/keys/server.key'),
    cert: fs.readFileSync('./bin/keys/server.cert')
}, app);

server.on("error", error => {
    if (error.syscall !== "listen") {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(`Port ${process.env.PORT} requires elevated privileges`);
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(`Port ${process.env.PORT} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
});

server.listen(process.env.PORT, () => {
    console.log(`Listening on https://localhost:${process.env.PORT}`);
});
